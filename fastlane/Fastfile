# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    # carthage
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    # Increment the build number (not the version number)
    increment_build_number(
      build_number: latest_testflight_build_number + 1
    )
    
    # Build the app
    gym

    # Upload to Testflight
    pilot
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    match(type: "appstore")
    #snapshot(localize_simulator: true, dark_mode: false)

    increment_version_number(
      version_number: "2.1.1" # Set a specific version number
    )

    frameit(white: true)
    gym(include_bitcode: true)
    deliver(force: true)
  end
  
  after_all do |lane|

    commit_version_bump

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag

    # Push the new commit and tag back to your git remote
    push_to_git_remote

    # Create Changelog from commits
    changelog_from_git_commits(
      pretty: "- (%ae) %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "exclude_merges"
    )

    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end